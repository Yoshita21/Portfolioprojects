
/*

Cleaning Data in SQL Queries

*/


Select * From nashville
select SaleDate from nashville
--------------------------------------------------------------------------------------------------------------------------

-- Standardize Date Format (removing time, by changing datetime to time)


Select SaleDate, CONVERT(Date,SaleDate)
From nashville


Update nashville
SET SaleDate = CONVERT(Date,SaleDate)

select SaleDate from nashville

-- If it doesn't Update properly (alter worked for me)

ALTER TABLE nashville
Add SaleDateConverted Date;

Update nashville
SET SaleDateConverted = CONVERT(Date,SaleDate)

select SaleDateConverted from nashville
 --------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data

Select *
From nashville
--Where PropertyAddress is null
order by ParcelID



Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
, ISNULL(a.PropertyAddress,b.PropertyAddress) -- putting the address in new column that can be substituted into the null values
From nashville a
JOIN nashville b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID]
Where a.PropertyAddress is null


Update a --while updating its better to use alias
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
From nashville a
JOIN nashville b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID] <> b.[UniqueID]
Where a.PropertyAddress is null




--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State)


Select PropertyAddress
From nashville
--Where PropertyAddress is null
--order by ParcelID

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address --where, start and wheretoend
From nashville

--create columns and add values

ALTER TABLE nashville
Add PropertySplitAddress Nvarchar(255);

Update nashville
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )


ALTER TABLE nashville
Add PropertySplitCity Nvarchar(255);

Update nashville
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))

Select *
From nashville

-------------
--Splitting ownername
SELECT
SUBSTRING(OwnerName, 1, ABS(CHARINDEX(',', OwnerName)-1)) as Lastname --USED abs as its giving invalid parameter
,SUBSTRING(OwnerName, CHARINDEX(',', OwnerName) + 1 , LEN(OwnerName)) as FIRSTNAME --where, start and wheretoend
From nashville


---------- anotherway to split, splitting owner address
Select OwnerAddress
From nashville

Select
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3) --parsename works backwards
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
From nashville



ALTER TABLE nashville
Add OwnerSplitAddress Nvarchar(255);

Update nashville
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)


ALTER TABLE nashville
Add OwnerSplitCity Nvarchar(255);

Update nashville
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)



ALTER TABLE nashville
Add OwnerSplitState Nvarchar(255);

Update nashville
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)



Select *
From nashville




--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No respectively in "Sold as Vacant" field


Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From nashville
Group by SoldAsVacant
order by 2




Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant -- if nothing to change let it remain as it is
	   END
From nashville


Update nashville
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END






-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates (check the fields which are supposed to be unique, find the enteries and remove)

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From nashville
--order by ParcelID
)
Select *
From RowNumCTE
Where row_num > 2
Order by PropertyAddress

--to delete
WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From nashville
--order by ParcelID
)
delete
From RowNumCTE
Where row_num > 2



Select *
From nashville

---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns

Select *
From nashville


ALTER TABLE nashville
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate

-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

--- Importing Data using OPENROWSET and BULK INSERT	

--  More advanced and looks cooler, but have to configure server appropriately to do correctly
--  Wanted to provide this in case you wanted to try it


--sp_configure 'show advanced options', 1;
--RECONFIGURE;
--GO
--sp_configure 'Ad Hoc Distributed Queries', 1;
--RECONFIGURE;
--GO


--USE PortfolioProject 

--GO 

--EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'AllowInProcess', 1 

--GO 

--EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'DynamicParameters', 1 

--GO 


---- Using BULK INSERT

--USE PortfolioProject;
--GO
--BULK INSERT nashvilleHousing FROM 'C:\Temp\SQL Server Management Studio\Nashville Housing Data for Data Cleaning Project.csv'
--   WITH (
--      FIELDTERMINATOR = ',',
--      ROWTERMINATOR = '\n'
--);
--GO


---- Using OPENROWSET
--USE PortfolioProject;
--GO
--SELECT * INTO nashvilleHousing
--FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
--    'Excel 12.0; Database=C:\Users\alexf\OneDrive\Documents\SQL Server Management Studio\Nashville Housing Data for Data Cleaning Project.csv', [Sheet1$]);
--GO

















